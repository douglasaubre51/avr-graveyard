
exp 8 b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000027  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000096  00000000  00000000  00000897  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000061  00000000  00000000  0000092d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000144  00000000  00000000  0000098e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000030  00000000  00000000  00000ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000094  00000000  00000000  00000b04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_pubtypes 0000001e  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <T1Delay>:
	}
}

void T1Delay()
{
	TCNT1H = 0x85;
  6c:	85 e8       	ldi	r24, 0x85	; 133
  6e:	8d bd       	out	0x2d, r24	; 45
	TCNT1L = 0xee;
  70:	8e ee       	ldi	r24, 0xEE	; 238
  72:	8c bd       	out	0x2c, r24	; 44
	
	TCCR1A = 0x00;
  74:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0x04;
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	8e bd       	out	0x2e, r24	; 46
	
	while((TIFR & (0x1 << TOV1)) == 0);
  7a:	08 b6       	in	r0, 0x38	; 56
  7c:	02 fe       	sbrs	r0, 2
  7e:	fd cf       	rjmp	.-6      	; 0x7a <T1Delay+0xe>
	
	TCCR1B = 0;
  80:	1e bc       	out	0x2e, r1	; 46
	TIFR = 0x1 << TOV1;
  82:	84 e0       	ldi	r24, 0x04	; 4
  84:	88 bf       	out	0x38, r24	; 56
  86:	08 95       	ret

00000088 <main>:
#include <avr/io.h>

void T1Delay();

int main(void)
{
  88:	1f 93       	push	r17
    DDRB = 0xff;
  8a:	8f ef       	ldi	r24, 0xFF	; 255
  8c:	87 bb       	out	0x17, r24	; 23
	
	while(1)
	{
		PORTB = PORTB ^ (1 << PB4);
  8e:	10 e1       	ldi	r17, 0x10	; 16
  90:	88 b3       	in	r24, 0x18	; 24
  92:	81 27       	eor	r24, r17
  94:	88 bb       	out	0x18, r24	; 24
		T1Delay();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <T1Delay>
  9a:	fa cf       	rjmp	.-12     	; 0x90 <main+0x8>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
